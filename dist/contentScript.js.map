{"version":3,"file":"contentScript.js","mappings":"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","sources":["webpack://DashPayConnect/webpack/universalModuleDefinition","webpack://DashPayConnect/./src/primitives/ServiceWorkerPort.js","webpack://DashPayConnect/./src/primitives/StdMessage.js","webpack://DashPayConnect/webpack/bootstrap","webpack://DashPayConnect/./src/content/contentScript.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"DashPayConnect\"] = factory();\n\telse\n\t\troot[\"DashPayConnect\"] = factory();\n})(self, () => {\nreturn ","class ServiceWorkerPort {\n    constructor() {\n        this.editorExtensionId = null\n        this.port = null;\n    }\n    connect(editorExtensionId){\n        console.log('ServiceWorkerPort: Connecting to '+editorExtensionId);\n        this.editorExtensionId = editorExtensionId;\n\n        const port = chrome.runtime.connect(editorExtensionId);\n        this.port = port;\n        port.onMessage.addListener((message)=>this.handleMessage.call(this,message));\n        return port;\n        // console.log({res})\n    }\n    postMessage(msg){\n        this.port.postMessage(msg);\n    }\n    handleMessage(msg){\n        // function(msg) {\n            console.log({msgFromPort: msg});\n        // }\n    }\n    doSomething(){\n        console.log('DO SOMETHING');\n    }\n};\nmodule.exports = ServiceWorkerPort;\n","const ACTIONS = {\n    PING:\"PING\",\n    PONG:\"PONG\",\n    CREATE:\"CREATE\",\n    EXECUTE:\"EXECUTE\",\n    GENERATE:\"GENERATE\",\n    FETCH:\"FETCH\",\n    CONNECT:\"CONNECT\",\n    UPDATE:\"UPDATE\",\n    CLOSE:\"CLOSE\",\n    DISCONNECT:\"DISCONNECT\",\n    UNDEFINED_ACTION:\"UNDEFINED_ACTION\"\n}\nclass StdMessage {\n    static fromMessage(message, sender){\n        return new StdMessage(message.action, message.args, sender ? sender : message.sender);\n    }\n    constructor(action = ACTIONS.UNDEFINED_ACTION, args = [], sender = null) {\n        this.action = action;\n        this.args = args;\n        this.sender = sender;\n    }\n    getTabId(){\n        return this.sender.tab?.id || false;\n    }\n    toJSON(){\n        const { action, args, sender }= this;\n        return {\n            action, args, sender\n        };\n    }\n};\nStdMessage.ACTIONS = ACTIONS;\nmodule.exports = StdMessage;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","let serviceWorkerPort;\nconst ServiceWorkerPort = require('../primitives/ServiceWorkerPort');\nconst StdMessage = require('../primitives/StdMessage');\nconst editorExtensionId = \"camoceckaeifkkpepgjoccjfjkcjhojc\";\n\n// chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n//     console.log({messageFromContentScript: message});\n//     chrome.tabs.sendMessage(tabId, { message: \"from content: \"+method, tabId}, undefined, sendResponse);\n// })\n// setInterval(()=>{\n//     console.log('Content Scriptt')\n// }, 2000)\n//\n//\n\n\nchrome.runtime.onConnect.addListener(port => {\n    console.log('CONTENT SCRIPT ON CONNECT');\n    console.log(port);\n    return true;\n    // if (port.name === 'frame') {\n    //     // global framePort can be used by code that will run in the future\n    //     framePort = port;\n    //     port.postMessage({foo: 'bar'});\n    // }\n});\n\nif(chrome.runtime.onMessageExternal){\n    chrome.runtime.onMessageExternal.addListener(async (message, sender, sendResponse) => {\n        console.log('ONMESSAGEEXTERNAL')\n        return true;\n    });\n}\n\nchrome.runtime.onMessage.addListener(async (message, sender, sendResponse) => {\n    console.log('CONTENT SCRIPT LISTENER');\n    // from here, we know the sending tab (message.sender) or the service worker (sender.id) requesting.\n    const stdMessage = StdMessage.fromMessage(message);\n    console.log(stdMessage);\n    switch (stdMessage.action){\n        case StdMessage.ACTIONS.DISCONNECT:\n            console.log('disconnect request');\n            serviceWorkerPort.postMessage(new StdMessage(StdMessage.ACTIONS.CLOSE));\n            serviceWorkerPort.disconnect();\n            break;\n        case StdMessage.ACTIONS.CONNECT:\n            serviceWorkerPort = new ServiceWorkerPort();\n            serviceWorkerPort.connect(editorExtensionId);\n\n            // We received information about the wallet we are connected to.\n            window.postMessage({ type: \"ACCOUNT\", args: stdMessage.args}, \"*\")\n\n            // Keeping the service worker alive\n            setInterval(()=>{\n                serviceWorkerPort.postMessage(new StdMessage(StdMessage.ACTIONS.PING, [...stdMessage.args,+new Date()]));\n            }, 20000);\n\n            // FIXME: Clean me.\n            serviceWorkerPort.port.onMessage.addListener((message)=>{\n                // Receiving message from service worker connection we just established\n                const streamStdMessage = StdMessage.fromMessage(message);\n                switch (streamStdMessage.action) {\n                    case \"PONG\":\n                        console.log(`Status: ping: ${streamStdMessage.args[1]-streamStdMessage.args[0]}`);\n                        break;\n                    case StdMessage.ACTIONS.UNDEFINED_ACTION:\n                    default:\n                        console.log(`UNSUPPORTED action ${stdMessage.action}. Provided object ${JSON.stringify({stdMessage})}`)\n                        break;\n\n                }\n            });\n            break;\n        case StdMessage.ACTIONS.CREATE:\n            window.postMessage(stdMessage, \"*\")\n            break\n        case StdMessage.ACTIONS.GENERATE:\n            window.postMessage(stdMessage, \"*\")\n            break\n        case StdMessage.ACTIONS.EXECUTE:\n            window.postMessage(stdMessage, \"*\")\n            break\n        case StdMessage.ACTIONS.FETCH:\n            window.postMessage(stdMessage, \"*\")\n            break\n        case StdMessage.ACTIONS.UNDEFINED_ACTION:\n        default:\n            console.log(`UNSUPPORTED action ${stdMessage.action}. Provided object ${JSON.stringify({stdMessage})}`)\n            window.postMessage(stdMessage, \"*\")\n            break;\n    }\n    // console.log({messageFromContentScript: message});\n    // chrome.tabs.sendMessage(tabId, { message: \"from content: \"+method, tabId}, undefined, sendResponse);\n    return true;\n})\n"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","self","ServiceWorkerPort","constructor","this","editorExtensionId","port","connect","console","log","chrome","runtime","onMessage","addListener","message","handleMessage","call","postMessage","msg","msgFromPort","doSomething","ACTIONS","PING","PONG","CREATE","EXECUTE","GENERATE","FETCH","CONNECT","UPDATE","CLOSE","DISCONNECT","UNDEFINED_ACTION","StdMessage","static","sender","action","args","getTabId","tab","id","toJSON","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","serviceWorkerPort","onConnect","onMessageExternal","async","sendResponse","stdMessage","fromMessage","disconnect","window","type","setInterval","Date","streamStdMessage","JSON","stringify"],"sourceRoot":""}